// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boilermodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGeoshots(t *testing.T) {
	t.Parallel()

	query := Geoshots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGeoshotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoshotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Geoshots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoshotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GeoshotSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoshotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GeoshotExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Geoshot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GeoshotExists to return true, but got false.")
	}
}

func testGeoshotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	geoshotFound, err := FindGeoshot(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if geoshotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGeoshotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Geoshots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGeoshotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Geoshots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGeoshotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoshotOne := &Geoshot{}
	geoshotTwo := &Geoshot{}
	if err = randomize.Struct(seed, geoshotOne, geoshotDBTypes, false, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}
	if err = randomize.Struct(seed, geoshotTwo, geoshotDBTypes, false, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = geoshotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = geoshotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Geoshots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGeoshotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	geoshotOne := &Geoshot{}
	geoshotTwo := &Geoshot{}
	if err = randomize.Struct(seed, geoshotOne, geoshotDBTypes, false, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}
	if err = randomize.Struct(seed, geoshotTwo, geoshotDBTypes, false, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = geoshotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = geoshotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func geoshotBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func geoshotAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Geoshot) error {
	*o = Geoshot{}
	return nil
}

func testGeoshotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Geoshot{}
	o := &Geoshot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, geoshotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Geoshot object: %s", err)
	}

	AddGeoshotHook(boil.BeforeInsertHook, geoshotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	geoshotBeforeInsertHooks = []GeoshotHook{}

	AddGeoshotHook(boil.AfterInsertHook, geoshotAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	geoshotAfterInsertHooks = []GeoshotHook{}

	AddGeoshotHook(boil.AfterSelectHook, geoshotAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	geoshotAfterSelectHooks = []GeoshotHook{}

	AddGeoshotHook(boil.BeforeUpdateHook, geoshotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	geoshotBeforeUpdateHooks = []GeoshotHook{}

	AddGeoshotHook(boil.AfterUpdateHook, geoshotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	geoshotAfterUpdateHooks = []GeoshotHook{}

	AddGeoshotHook(boil.BeforeDeleteHook, geoshotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	geoshotBeforeDeleteHooks = []GeoshotHook{}

	AddGeoshotHook(boil.AfterDeleteHook, geoshotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	geoshotAfterDeleteHooks = []GeoshotHook{}

	AddGeoshotHook(boil.BeforeUpsertHook, geoshotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	geoshotBeforeUpsertHooks = []GeoshotHook{}

	AddGeoshotHook(boil.AfterUpsertHook, geoshotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	geoshotAfterUpsertHooks = []GeoshotHook{}
}

func testGeoshotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoshotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(geoshotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoshotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGeoshotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GeoshotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGeoshotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Geoshots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	geoshotDBTypes = map[string]string{`ID`: `int`, `EventID`: `int`, `DeviceID`: `int`, `Imgpath`: `varchar`, `Lat`: `double`, `Lon`: `double`, `Timestamp`: `datetime`, `Age`: `int`, `Buffered`: `int`, `Onstage`: `int`, `Eventhos`: `int`, `EventhosStat`: `int`, `Jsonpath`: `varchar`, `Synced`: `int`}
	_              = bytes.MinRead
)

func testGeoshotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(geoshotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(geoshotAllColumns) == len(geoshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGeoshotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(geoshotAllColumns) == len(geoshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Geoshot{}
	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, geoshotDBTypes, true, geoshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(geoshotAllColumns, geoshotPrimaryKeyColumns) {
		fields = geoshotAllColumns
	} else {
		fields = strmangle.SetComplement(
			geoshotAllColumns,
			geoshotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GeoshotSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGeoshotsUpsert(t *testing.T) {
	t.Parallel()

	if len(geoshotAllColumns) == len(geoshotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGeoshotUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Geoshot{}
	if err = randomize.Struct(seed, &o, geoshotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Geoshot: %s", err)
	}

	count, err := Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, geoshotDBTypes, false, geoshotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Geoshot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Geoshot: %s", err)
	}

	count, err = Geoshots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
