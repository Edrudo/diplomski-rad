// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boilermodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Geoshot is an object representing the database table.
type Geoshot struct {
	ID           uint         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID      null.Int     `boil:"eventID" json:"eventID,omitempty" toml:"eventID" yaml:"eventID,omitempty"`
	DeviceID     null.Int     `boil:"deviceID" json:"deviceID,omitempty" toml:"deviceID" yaml:"deviceID,omitempty"`
	Imgpath      null.String  `boil:"imgpath" json:"imgpath,omitempty" toml:"imgpath" yaml:"imgpath,omitempty"`
	Lat          null.Float64 `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	Lon          null.Float64 `boil:"lon" json:"lon,omitempty" toml:"lon" yaml:"lon,omitempty"`
	Timestamp    null.Time    `boil:"timestamp" json:"timestamp,omitempty" toml:"timestamp" yaml:"timestamp,omitempty"`
	Age          null.Int     `boil:"age" json:"age,omitempty" toml:"age" yaml:"age,omitempty"`
	Buffered     null.Int     `boil:"buffered" json:"buffered,omitempty" toml:"buffered" yaml:"buffered,omitempty"`
	Onstage      null.Int     `boil:"onstage" json:"onstage,omitempty" toml:"onstage" yaml:"onstage,omitempty"`
	Eventhos     null.Int     `boil:"eventhos" json:"eventhos,omitempty" toml:"eventhos" yaml:"eventhos,omitempty"`
	EventhosStat null.Int     `boil:"eventhosStat" json:"eventhosStat,omitempty" toml:"eventhosStat" yaml:"eventhosStat,omitempty"`
	Jsonpath     null.String  `boil:"jsonpath" json:"jsonpath,omitempty" toml:"jsonpath" yaml:"jsonpath,omitempty"`
	Synced       null.Int     `boil:"synced" json:"synced,omitempty" toml:"synced" yaml:"synced,omitempty"`

	R *geoshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L geoshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GeoshotColumns = struct {
	ID           string
	EventID      string
	DeviceID     string
	Imgpath      string
	Lat          string
	Lon          string
	Timestamp    string
	Age          string
	Buffered     string
	Onstage      string
	Eventhos     string
	EventhosStat string
	Jsonpath     string
	Synced       string
}{
	ID:           "id",
	EventID:      "eventID",
	DeviceID:     "deviceID",
	Imgpath:      "imgpath",
	Lat:          "lat",
	Lon:          "lon",
	Timestamp:    "timestamp",
	Age:          "age",
	Buffered:     "buffered",
	Onstage:      "onstage",
	Eventhos:     "eventhos",
	EventhosStat: "eventhosStat",
	Jsonpath:     "jsonpath",
	Synced:       "synced",
}

var GeoshotTableColumns = struct {
	ID           string
	EventID      string
	DeviceID     string
	Imgpath      string
	Lat          string
	Lon          string
	Timestamp    string
	Age          string
	Buffered     string
	Onstage      string
	Eventhos     string
	EventhosStat string
	Jsonpath     string
	Synced       string
}{
	ID:           "geoshots.id",
	EventID:      "geoshots.eventID",
	DeviceID:     "geoshots.deviceID",
	Imgpath:      "geoshots.imgpath",
	Lat:          "geoshots.lat",
	Lon:          "geoshots.lon",
	Timestamp:    "geoshots.timestamp",
	Age:          "geoshots.age",
	Buffered:     "geoshots.buffered",
	Onstage:      "geoshots.onstage",
	Eventhos:     "geoshots.eventhos",
	EventhosStat: "geoshots.eventhosStat",
	Jsonpath:     "geoshots.jsonpath",
	Synced:       "geoshots.synced",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GeoshotWhere = struct {
	ID           whereHelperuint
	EventID      whereHelpernull_Int
	DeviceID     whereHelpernull_Int
	Imgpath      whereHelpernull_String
	Lat          whereHelpernull_Float64
	Lon          whereHelpernull_Float64
	Timestamp    whereHelpernull_Time
	Age          whereHelpernull_Int
	Buffered     whereHelpernull_Int
	Onstage      whereHelpernull_Int
	Eventhos     whereHelpernull_Int
	EventhosStat whereHelpernull_Int
	Jsonpath     whereHelpernull_String
	Synced       whereHelpernull_Int
}{
	ID:           whereHelperuint{field: "`geoshots`.`id`"},
	EventID:      whereHelpernull_Int{field: "`geoshots`.`eventID`"},
	DeviceID:     whereHelpernull_Int{field: "`geoshots`.`deviceID`"},
	Imgpath:      whereHelpernull_String{field: "`geoshots`.`imgpath`"},
	Lat:          whereHelpernull_Float64{field: "`geoshots`.`lat`"},
	Lon:          whereHelpernull_Float64{field: "`geoshots`.`lon`"},
	Timestamp:    whereHelpernull_Time{field: "`geoshots`.`timestamp`"},
	Age:          whereHelpernull_Int{field: "`geoshots`.`age`"},
	Buffered:     whereHelpernull_Int{field: "`geoshots`.`buffered`"},
	Onstage:      whereHelpernull_Int{field: "`geoshots`.`onstage`"},
	Eventhos:     whereHelpernull_Int{field: "`geoshots`.`eventhos`"},
	EventhosStat: whereHelpernull_Int{field: "`geoshots`.`eventhosStat`"},
	Jsonpath:     whereHelpernull_String{field: "`geoshots`.`jsonpath`"},
	Synced:       whereHelpernull_Int{field: "`geoshots`.`synced`"},
}

// GeoshotRels is where relationship names are stored.
var GeoshotRels = struct {
}{}

// geoshotR is where relationships are stored.
type geoshotR struct {
}

// NewStruct creates a new relationship struct
func (*geoshotR) NewStruct() *geoshotR {
	return &geoshotR{}
}

// geoshotL is where Load methods for each relationship are stored.
type geoshotL struct{}

var (
	geoshotAllColumns            = []string{"id", "eventID", "deviceID", "imgpath", "lat", "lon", "timestamp", "age", "buffered", "onstage", "eventhos", "eventhosStat", "jsonpath", "synced"}
	geoshotColumnsWithoutDefault = []string{"eventID", "deviceID", "imgpath", "lat", "lon", "timestamp", "age", "buffered", "onstage", "eventhos", "eventhosStat", "jsonpath", "synced"}
	geoshotColumnsWithDefault    = []string{"id"}
	geoshotPrimaryKeyColumns     = []string{"id"}
	geoshotGeneratedColumns      = []string{}
)

type (
	// GeoshotSlice is an alias for a slice of pointers to Geoshot.
	// This should almost always be used instead of []Geoshot.
	GeoshotSlice []*Geoshot
	// GeoshotHook is the signature for custom Geoshot hook methods
	GeoshotHook func(context.Context, boil.ContextExecutor, *Geoshot) error

	geoshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	geoshotType                 = reflect.TypeOf(&Geoshot{})
	geoshotMapping              = queries.MakeStructMapping(geoshotType)
	geoshotPrimaryKeyMapping, _ = queries.BindMapping(geoshotType, geoshotMapping, geoshotPrimaryKeyColumns)
	geoshotInsertCacheMut       sync.RWMutex
	geoshotInsertCache          = make(map[string]insertCache)
	geoshotUpdateCacheMut       sync.RWMutex
	geoshotUpdateCache          = make(map[string]updateCache)
	geoshotUpsertCacheMut       sync.RWMutex
	geoshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var geoshotAfterSelectMu sync.Mutex
var geoshotAfterSelectHooks []GeoshotHook

var geoshotBeforeInsertMu sync.Mutex
var geoshotBeforeInsertHooks []GeoshotHook
var geoshotAfterInsertMu sync.Mutex
var geoshotAfterInsertHooks []GeoshotHook

var geoshotBeforeUpdateMu sync.Mutex
var geoshotBeforeUpdateHooks []GeoshotHook
var geoshotAfterUpdateMu sync.Mutex
var geoshotAfterUpdateHooks []GeoshotHook

var geoshotBeforeDeleteMu sync.Mutex
var geoshotBeforeDeleteHooks []GeoshotHook
var geoshotAfterDeleteMu sync.Mutex
var geoshotAfterDeleteHooks []GeoshotHook

var geoshotBeforeUpsertMu sync.Mutex
var geoshotBeforeUpsertHooks []GeoshotHook
var geoshotAfterUpsertMu sync.Mutex
var geoshotAfterUpsertHooks []GeoshotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Geoshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Geoshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Geoshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Geoshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Geoshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Geoshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Geoshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Geoshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Geoshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geoshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeoshotHook registers your hook function for all future operations.
func AddGeoshotHook(hookPoint boil.HookPoint, geoshotHook GeoshotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		geoshotAfterSelectMu.Lock()
		geoshotAfterSelectHooks = append(geoshotAfterSelectHooks, geoshotHook)
		geoshotAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		geoshotBeforeInsertMu.Lock()
		geoshotBeforeInsertHooks = append(geoshotBeforeInsertHooks, geoshotHook)
		geoshotBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		geoshotAfterInsertMu.Lock()
		geoshotAfterInsertHooks = append(geoshotAfterInsertHooks, geoshotHook)
		geoshotAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		geoshotBeforeUpdateMu.Lock()
		geoshotBeforeUpdateHooks = append(geoshotBeforeUpdateHooks, geoshotHook)
		geoshotBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		geoshotAfterUpdateMu.Lock()
		geoshotAfterUpdateHooks = append(geoshotAfterUpdateHooks, geoshotHook)
		geoshotAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		geoshotBeforeDeleteMu.Lock()
		geoshotBeforeDeleteHooks = append(geoshotBeforeDeleteHooks, geoshotHook)
		geoshotBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		geoshotAfterDeleteMu.Lock()
		geoshotAfterDeleteHooks = append(geoshotAfterDeleteHooks, geoshotHook)
		geoshotAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		geoshotBeforeUpsertMu.Lock()
		geoshotBeforeUpsertHooks = append(geoshotBeforeUpsertHooks, geoshotHook)
		geoshotBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		geoshotAfterUpsertMu.Lock()
		geoshotAfterUpsertHooks = append(geoshotAfterUpsertHooks, geoshotHook)
		geoshotAfterUpsertMu.Unlock()
	}
}

// One returns a single geoshot record from the query.
func (q geoshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Geoshot, error) {
	o := &Geoshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for geoshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Geoshot records from the query.
func (q geoshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (GeoshotSlice, error) {
	var o []*Geoshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Geoshot slice")
	}

	if len(geoshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Geoshot records in the query.
func (q geoshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count geoshots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q geoshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if geoshots exists")
	}

	return count > 0, nil
}

// Geoshots retrieves all the records using an executor.
func Geoshots(mods ...qm.QueryMod) geoshotQuery {
	mods = append(mods, qm.From("`geoshots`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`geoshots`.*"})
	}

	return geoshotQuery{q}
}

// FindGeoshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeoshot(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Geoshot, error) {
	geoshotObj := &Geoshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `geoshots` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, geoshotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from geoshots")
	}

	if err = geoshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return geoshotObj, err
	}

	return geoshotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Geoshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no geoshots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	geoshotInsertCacheMut.RLock()
	cache, cached := geoshotInsertCache[key]
	geoshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			geoshotAllColumns,
			geoshotColumnsWithDefault,
			geoshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(geoshotType, geoshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(geoshotType, geoshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `geoshots` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `geoshots` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `geoshots` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, geoshotPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into geoshots")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoshotMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geoshots")
	}

CacheNoHooks:
	if !cached {
		geoshotInsertCacheMut.Lock()
		geoshotInsertCache[key] = cache
		geoshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Geoshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Geoshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	geoshotUpdateCacheMut.RLock()
	cache, cached := geoshotUpdateCache[key]
	geoshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			geoshotAllColumns,
			geoshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update geoshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `geoshots` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, geoshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(geoshotType, geoshotMapping, append(wl, geoshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update geoshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for geoshots")
	}

	if !cached {
		geoshotUpdateCacheMut.Lock()
		geoshotUpdateCache[key] = cache
		geoshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q geoshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for geoshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for geoshots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeoshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `geoshots` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in geoshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all geoshot")
	}
	return rowsAff, nil
}

var mySQLGeoshotUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Geoshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no geoshots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoshotColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGeoshotUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	geoshotUpsertCacheMut.RLock()
	cache, cached := geoshotUpsertCache[key]
	geoshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			geoshotAllColumns,
			geoshotColumnsWithDefault,
			geoshotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			geoshotAllColumns,
			geoshotPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert geoshots, could not build update column list")
		}

		ret := strmangle.SetComplement(geoshotAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`geoshots`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `geoshots` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(geoshotType, geoshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(geoshotType, geoshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for geoshots")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoshotMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(geoshotType, geoshotMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for geoshots")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geoshots")
	}

CacheNoHooks:
	if !cached {
		geoshotUpsertCacheMut.Lock()
		geoshotUpsertCache[key] = cache
		geoshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Geoshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Geoshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Geoshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), geoshotPrimaryKeyMapping)
	sql := "DELETE FROM `geoshots` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from geoshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for geoshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q geoshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no geoshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from geoshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for geoshots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeoshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(geoshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `geoshots` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from geoshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for geoshots")
	}

	if len(geoshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Geoshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGeoshot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeoshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GeoshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `geoshots`.* FROM `geoshots` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeoshotSlice")
	}

	*o = slice

	return nil
}

// GeoshotExists checks if the Geoshot row exists.
func GeoshotExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `geoshots` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if geoshots exists")
	}

	return exists, nil
}

// Exists checks if the Geoshot row exists.
func (o *Geoshot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GeoshotExists(ctx, exec, o.ID)
}
